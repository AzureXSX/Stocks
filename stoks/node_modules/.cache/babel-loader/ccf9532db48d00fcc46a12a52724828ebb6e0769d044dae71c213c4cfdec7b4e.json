{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// **Github:** https://github.com/fidm/quic\n//\n// **License:** MIT\nconst util_1 = require(\"util\");\nconst stream_1 = require(\"stream\");\nconst error_1 = require(\"./internal/error\");\nconst constant_1 = require(\"./internal/constant\");\nconst protocol_1 = require(\"./internal/protocol\");\nconst frame_1 = require(\"./internal/frame\");\nconst flowcontrol_1 = require(\"./internal/flowcontrol\");\nconst common_1 = require(\"./internal/common\");\nconst symbol_1 = require(\"./internal/symbol\");\nconst debug = util_1.debuglog('quic:stream');\nclass Stream extends stream_1.Duplex {\n  constructor(streamID, session, options) {\n    options.allowHalfOpen = true;\n    options.objectMode = false;\n    super(options);\n    this[symbol_1.kID] = streamID;\n    this[symbol_1.kSession] = session;\n    this[symbol_1.kState] = new StreamState();\n    this[symbol_1.kFC] = session.isClient ?\n    // TODO: small window will make \"packets loss\" test failure\n    new flowcontrol_1.StreamFlowController(constant_1.ReceiveStreamWindow, constant_1.DefaultMaxReceiveStreamWindowClient, session[symbol_1.kFC]) : new flowcontrol_1.StreamFlowController(constant_1.ReceiveStreamWindow, constant_1.DefaultMaxReceiveStreamWindowServer, session[symbol_1.kFC]);\n    this.once('close', () => this[symbol_1.kState].lastActivityTime = Date.now());\n    debug(`session %s - new stream: %d`, session.id, streamID.valueOf());\n  }\n  // The socket owned by this session\n  get id() {\n    return this[symbol_1.kID].valueOf();\n  }\n  get session() {\n    return this[symbol_1.kSession];\n  }\n  get aborted() {\n    return this[symbol_1.kState].aborted;\n  }\n  get destroyed() {\n    return this[symbol_1.kState].destroyed;\n  }\n  get bytesRead() {\n    return this[symbol_1.kFC].consumedOffset;\n  }\n  get bytesWritten() {\n    return this[symbol_1.kFC].writtenOffset;\n  }\n  // close closes the stream with an error.\n  close(err) {\n    this[symbol_1.kState].localFIN = true;\n    const offset = new protocol_1.Offset(this[symbol_1.kFC].writtenOffset);\n    const rstStreamFrame = new frame_1.RstStreamFrame(this[symbol_1.kID], offset, error_1.StreamError.fromError(err));\n    debug(`stream %s - close stream, offset: %d, error: %j`, this.id, offset.valueOf(), err);\n    return new Promise(resolve => {\n      this[symbol_1.kSession]._sendFrame(rstStreamFrame, e => {\n        if (e != null) {\n          this.destroy(e);\n        }\n        resolve();\n      });\n    });\n  }\n  _write(chunk, encoding, callback) {\n    if (this[symbol_1.kState].localFIN) {\n      return callback(new error_1.StreamError('QUIC_RST_ACKNOWLEDGEMENT'));\n    }\n    if (!(chunk instanceof Buffer)) {\n      chunk = Buffer.from(chunk, encoding);\n    }\n    if (chunk.length === 0) {\n      return callback(null);\n    }\n    this[symbol_1.kState].outgoingChunksList.push(chunk, callback);\n    this._tryFlushCallbacks();\n  }\n  _writev(chunks, callback) {\n    if (this[symbol_1.kState].localFIN) {\n      return callback(new error_1.StreamError('QUIC_RST_ACKNOWLEDGEMENT'));\n    }\n    let len = 0;\n    const list = [];\n    for (const item of chunks) {\n      // { chunk: ..., encoding: ... }\n      let chunk = item.chunk;\n      if (!(chunk instanceof Buffer)) {\n        chunk = Buffer.from(chunk, item.encoding);\n      }\n      len += chunk.length;\n      list.push(chunk);\n    }\n    if (len === 0) {\n      return callback(null);\n    }\n    this[symbol_1.kState].outgoingChunksList.push(Buffer.concat(list, len), callback);\n    this._tryFlushCallbacks();\n  }\n  _final(callback) {\n    this[symbol_1.kState].outgoingChunksList.push(null, callback);\n    this._tryFlushCallbacks();\n  }\n  _read(size = 0) {\n    let data = this[symbol_1.kState].incomingSequencer.read();\n    while (data != null) {\n      if (this.push(data) && size > data.length) {\n        size -= data.length;\n        data = this[symbol_1.kState].incomingSequencer.read();\n        continue;\n      }\n      break;\n    }\n    this[symbol_1.kFC].updateConsumedOffset(this[symbol_1.kState].incomingSequencer.consumedOffset);\n    if (!this[symbol_1.kState].remoteFIN) {\n      process.nextTick(() => this._trySendUpdateWindow());\n    }\n    if (!this[symbol_1.kState].ended && this[symbol_1.kState].incomingSequencer.isFIN()) {\n      this[symbol_1.kState].ended = true;\n      this.push(null);\n    }\n  }\n  _destroy(err, callback) {\n    debug(`stream %s - stream destroyed, error: %j`, this.id, err);\n    this[symbol_1.kSession][symbol_1.kState].liveStreamCount -= 1;\n    const state = this[symbol_1.kState];\n    state.localFIN = true;\n    state.remoteFIN = true;\n    state.aborted = true;\n    state.destroyed = true;\n    state.finished = true;\n    state.incomingSequencer.reset();\n    state.outgoingChunksList.reset();\n    err = error_1.StreamError.checkAny(err);\n    if (err != null && err.isNoError) {\n      err = null;\n    }\n    callback(err);\n  }\n  _sendBlockFrame() {\n    this[symbol_1.kSession]._sendFrame(new frame_1.BlockedFrame(this[symbol_1.kID]));\n  }\n  _trySendUpdateWindow() {\n    if (this[symbol_1.kFC].shouldUpdateWindow()) {\n      const offset = this[symbol_1.kFC].updateWindowOffset(this[symbol_1.kSession][symbol_1.kRTT].msRTT);\n      this[symbol_1.kSession]._sendWindowUpdate(new protocol_1.Offset(offset), this[symbol_1.kID]);\n    }\n  }\n  _handleFrame(frame, rcvTime) {\n    this[symbol_1.kState].lastActivityTime = rcvTime;\n    const offset = frame.offset.valueOf();\n    const byteLen = frame.data == null ? 0 : frame.data.length;\n    debug(`stream %s - received StreamFrame, offset: %d, data size: %d, isFIN: %s`, this.id, offset, byteLen, frame.isFIN);\n    this[symbol_1.kFC].updateHighestReceived(offset + byteLen);\n    if (this[symbol_1.kFC].isBlocked()) {\n      this.emit('error', new Error('The window of byte offset overflowed'));\n      this.close(error_1.StreamError.fromError(error_1.StreamError.QUIC_ERROR_PROCESSING_STREAM));\n      return;\n    }\n    if (frame.isFIN) {\n      this[symbol_1.kState].remoteFIN = true;\n      this[symbol_1.kState].incomingSequencer.setFinalOffset(offset + byteLen);\n    }\n    if (frame.data != null) {\n      if (this[symbol_1.kState].incomingSequencer.hasOffset(offset)) {\n        return; // duplicated frame\n      }\n      this[symbol_1.kState].incomingSequencer.push(frame);\n    }\n    this._read();\n    if (this[symbol_1.kState].incomingSequencer.byteLen > constant_1.MaxStreamReadCacheSize) {\n      this.emit('error', new Error('Too large caching, stream data maybe lost'));\n      this.destroy(error_1.StreamError.fromError(error_1.StreamError.QUIC_ERROR_PROCESSING_STREAM));\n    }\n  }\n  _handleRstFrame(frame, rcvTime) {\n    this[symbol_1.kState].lastActivityTime = rcvTime;\n    this[symbol_1.kState].remoteFIN = true;\n    this[symbol_1.kState].incomingSequencer.setFinalOffset(frame.offset.valueOf());\n    debug(`stream %s - received RstStreamFrame, offset: %d, error: %j`, this.id, frame.offset.valueOf(), frame.error);\n    if (this[symbol_1.kState].localFIN) {\n      this.destroy(frame.error);\n    } else {\n      this.emit('error', frame.error);\n      this.close(error_1.StreamError.fromError(error_1.StreamError.QUIC_RST_ACKNOWLEDGEMENT));\n    }\n    return;\n  }\n  _tryFlushCallbacks() {\n    const entry = this[symbol_1.kState].outgoingChunksList.first();\n    if (entry == null || this[symbol_1.kState].flushing) {\n      return;\n    }\n    if (entry.data != null && !this._isRemoteWriteable(this[symbol_1.kSession][symbol_1.kState].maxPacketSize)) {\n      return;\n    }\n    const callback = entry.callback;\n    this[symbol_1.kState].flushing = true;\n    this._flushData(entry.data, err => {\n      this[symbol_1.kState].flushing = false;\n      if (entry.checkConsumed()) {\n        this[symbol_1.kState].outgoingChunksList.shift();\n        callback(err);\n      }\n      if (err == null && this[symbol_1.kState].outgoingChunksList.pendingCb > 0) {\n        return this._tryFlushCallbacks();\n      }\n    });\n  }\n  _isRemoteWriteable(byteLen) {\n    if (this[symbol_1.kFC].willBlocked(byteLen)) {\n      // should wait for WINDOW_UPDATE\n      debug(`stream %s - wait for WINDOW_UPDATE, writtenOffset: %d, maxSendOffset: %d, to write size: %d`, this.id, this[symbol_1.kFC].writtenOffset, this[symbol_1.kFC].maxSendOffset, byteLen);\n      this._sendBlockFrame();\n      return false;\n    }\n    return true;\n  }\n  _flushData(bufv, callback) {\n    let byteLen = 0; // bytes to write\n    let nextByteLen = 0; // bytes for next write\n    const offet = new protocol_1.Offset(this[symbol_1.kFC].writtenOffset);\n    const streamFrame = new frame_1.StreamFrame(this[symbol_1.kID], offet, bufv == null);\n    const packet = this[symbol_1.kSession]._newRegularPacket();\n    if (bufv != null) {\n      byteLen = Math.min(bufv.length - bufv.end, this[symbol_1.kSession][symbol_1.kState].maxPacketSize - packet.headerLen() - streamFrame.headerLen(true));\n      bufv.walk(byteLen);\n      nextByteLen = Math.min(byteLen, bufv.length - bufv.end);\n      streamFrame.setData(bufv.buf.slice(bufv.start, bufv.end));\n      this[symbol_1.kFC].updateWrittenOffset(byteLen);\n    }\n    if (streamFrame.isFIN) {\n      this[symbol_1.kState].localFIN = true;\n    }\n    debug(`stream %s - write streamFrame, isFIN: %s, offset: %d, data size: %d`, this.id, streamFrame.isFIN, streamFrame.offset.valueOf(), byteLen);\n    packet.addFrames(streamFrame);\n    packet.isRetransmittable = true;\n    this[symbol_1.kSession]._sendPacket(packet, err => {\n      // Packet Number length maybe increase 1 byte\n      if (err != null || nextByteLen === 0 || !this._isRemoteWriteable(nextByteLen + 1)) {\n        return callback(err);\n      }\n      this._flushData(bufv, callback);\n    });\n  }\n}\nexports.Stream = Stream;\nclass StreamState {\n  constructor() {\n    this.localFIN = false; // local endpoint will not send data\n    this.remoteFIN = false; // remote endpoint should not send data\n    this.flushing = false;\n    this.ended = false;\n    this.aborted = false;\n    this.destroyed = false;\n    this.finished = false;\n    this.lastActivityTime = Date.now();\n    this.incomingSequencer = new StreamSequencer();\n    this.outgoingChunksList = new StreamDataList();\n  }\n}\nclass StreamDataEntry {\n  constructor(callback, buf) {\n    this.callback = callback;\n    this.next = null;\n    this.data = buf == null ? null : new common_1.BufferVisitor(buf);\n  }\n  get byteLen() {\n    return this.data == null ? 0 : this.data.length;\n  }\n  checkConsumed() {\n    return this.data == null || this.data.end === this.data.length;\n  }\n}\nclass StreamDataList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this.pendingCb = 0;\n    this.byteLen = 0;\n  }\n  reset() {\n    this.head = null;\n    this.tail = null;\n    this.pendingCb = 0;\n    this.byteLen = 0;\n  }\n  push(buf, callback) {\n    const entry = new StreamDataEntry(callback, buf);\n    if (this.tail != null) {\n      this.tail.next = entry;\n    } else {\n      this.head = entry;\n    }\n    this.tail = entry;\n    this.pendingCb += 1;\n    this.byteLen += entry.byteLen;\n  }\n  first() {\n    return this.head;\n  }\n  shift() {\n    if (this.head == null) {\n      return null;\n    }\n    const entry = this.head;\n    if (this.pendingCb === 1) {\n      this.head = this.tail = null;\n    } else {\n      this.head = this.head.next;\n    }\n    this.pendingCb -= 1;\n    this.byteLen -= entry.byteLen;\n    return entry;\n  }\n}\nclass StreamFrameEntry {\n  constructor(frame, entry) {\n    this.data = frame.data;\n    this.offset = frame.offset.valueOf();\n    this.next = entry;\n  }\n}\n// sequencer\nclass StreamSequencer {\n  constructor() {\n    this.head = null;\n    this.byteLen = 0;\n    this.consumedOffset = 0;\n    this.finalOffset = -1;\n    this.pendingOffsets = new Set();\n  }\n  hasOffset(offset) {\n    if (offset < this.consumedOffset) {\n      return true;\n    }\n    return this.pendingOffsets.has(offset);\n  }\n  reset() {\n    this.head = null;\n    this.byteLen = 0;\n    this.consumedOffset = 0;\n    this.finalOffset = -1;\n    this.pendingOffsets.clear();\n  }\n  setFinalOffset(offset) {\n    this.finalOffset = offset;\n  }\n  isFIN() {\n    return this.consumedOffset === this.finalOffset;\n  }\n  /**\n   * @param {StreamFrame}\n   */\n  push(frame) {\n    const entry = new StreamFrameEntry(frame, null);\n    const offset = entry.offset;\n    this.pendingOffsets.add(offset);\n    if (entry.data != null) {\n      this.byteLen += entry.data.length;\n    }\n    if (this.head == null) {\n      this.head = entry;\n    } else if (this.head.offset > offset) {\n      entry.next = this.head;\n      this.head = entry;\n    } else {\n      let prev = this.head;\n      while (true) {\n        if (prev.next == null) {\n          prev.next = entry;\n          break;\n        }\n        if (prev.next.offset > offset) {\n          entry.next = prev.next;\n          prev.next = entry;\n          break;\n        }\n        prev = prev.next;\n      }\n    }\n  }\n  read() {\n    let data = null;\n    if (this.head != null && this.consumedOffset === this.head.offset) {\n      data = this.head.data;\n      if (data != null) {\n        this.pendingOffsets.delete(this.consumedOffset);\n        this.byteLen -= data.length;\n        this.consumedOffset += data.length;\n      }\n      this.head = this.head.next;\n    }\n    return data;\n  }\n}","map":{"version":3,"names":["util_1","require","stream_1","error_1","constant_1","protocol_1","frame_1","flowcontrol_1","common_1","symbol_1","debug","debuglog","Stream","Duplex","constructor","streamID","session","options","allowHalfOpen","objectMode","kID","kSession","kState","StreamState","kFC","isClient","StreamFlowController","ReceiveStreamWindow","DefaultMaxReceiveStreamWindowClient","DefaultMaxReceiveStreamWindowServer","once","lastActivityTime","Date","now","id","valueOf","aborted","destroyed","bytesRead","consumedOffset","bytesWritten","writtenOffset","close","err","localFIN","offset","Offset","rstStreamFrame","RstStreamFrame","StreamError","fromError","Promise","resolve","_sendFrame","e","destroy","_write","chunk","encoding","callback","Buffer","from","length","outgoingChunksList","push","_tryFlushCallbacks","_writev","chunks","len","list","item","concat","_final","_read","size","data","incomingSequencer","read","updateConsumedOffset","remoteFIN","process","nextTick","_trySendUpdateWindow","ended","isFIN","_destroy","liveStreamCount","state","finished","reset","checkAny","isNoError","_sendBlockFrame","BlockedFrame","shouldUpdateWindow","updateWindowOffset","kRTT","msRTT","_sendWindowUpdate","_handleFrame","frame","rcvTime","byteLen","updateHighestReceived","isBlocked","emit","Error","QUIC_ERROR_PROCESSING_STREAM","setFinalOffset","hasOffset","MaxStreamReadCacheSize","_handleRstFrame","error","QUIC_RST_ACKNOWLEDGEMENT","entry","first","flushing","_isRemoteWriteable","maxPacketSize","_flushData","checkConsumed","shift","pendingCb","willBlocked","maxSendOffset","bufv","nextByteLen","offet","streamFrame","StreamFrame","packet","_newRegularPacket","Math","min","end","headerLen","walk","setData","buf","slice","start","updateWrittenOffset","addFrames","isRetransmittable","_sendPacket","exports","StreamSequencer","StreamDataList","StreamDataEntry","next","BufferVisitor","head","tail","StreamFrameEntry","finalOffset","pendingOffsets","Set","has","clear","add","prev","delete"],"sources":["../src/stream.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}