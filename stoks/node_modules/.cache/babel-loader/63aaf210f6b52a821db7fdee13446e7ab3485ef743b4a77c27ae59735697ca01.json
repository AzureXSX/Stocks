{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// **Github:** https://github.com/fidm/quic\n//\n// **License:** MIT\nconst util_1 = require(\"util\");\nconst events_1 = require(\"events\");\nconst constant_1 = require(\"./internal/constant\");\nconst protocol_1 = require(\"./internal/protocol\");\nconst symbol_1 = require(\"./internal/symbol\");\nconst frame_1 = require(\"./internal/frame\");\nconst packet_1 = require(\"./internal/packet\");\nconst error_1 = require(\"./internal/error\");\nconst flowcontrol_1 = require(\"./internal/flowcontrol\");\nconst congestion_1 = require(\"./internal/congestion\");\nconst socket_1 = require(\"./socket\");\nconst stream_1 = require(\"./stream\");\nconst common_1 = require(\"./internal/common\");\nconst debug = util_1.debuglog('quic:session');\n//\n// *************** Session ***************\n//\nclass Session extends events_1.EventEmitter {\n  constructor(id, type) {\n    super();\n    this[symbol_1.kID] = id;\n    this[symbol_1.kType] = type;\n    this[symbol_1.kStreams] = new Map();\n    this[symbol_1.kNextStreamID] = new protocol_1.StreamID(type === protocol_1.SessionType.SERVER ? 2 : 1);\n    this[symbol_1.kState] = new SessionState();\n    this[symbol_1.kACKHandler] = new ACKHandler();\n    this[symbol_1.kSocket] = null;\n    this[symbol_1.kVersion] = '';\n    this[symbol_1.kIntervalCheck] = null;\n    this[symbol_1.kNextPacketNumber] = new protocol_1.PacketNumber(1);\n    this[symbol_1.kUnackedPackets] = new common_1.Queue(); // up to 1000\n    this[symbol_1.kRTT] = new congestion_1.RTTStats();\n    this[symbol_1.kFC] = this.isClient ?\n    // TODO\n    new flowcontrol_1.ConnectionFlowController(constant_1.ReceiveConnectionWindow, constant_1.DefaultMaxReceiveConnectionWindowClient) : new flowcontrol_1.ConnectionFlowController(constant_1.ReceiveConnectionWindow, constant_1.DefaultMaxReceiveConnectionWindowServer);\n  }\n  get id() {\n    return this[symbol_1.kID].valueOf();\n  }\n  get version() {\n    return this[symbol_1.kVersion];\n  }\n  get isClient() {\n    return this[symbol_1.kType] === protocol_1.SessionType.CLIENT;\n  }\n  get destroyed() {\n    return this[symbol_1.kState].destroyed;\n  }\n  get localAddr() {\n    return {\n      address: this[symbol_1.kState].localAddress,\n      family: this[symbol_1.kState].localFamily,\n      port: this[symbol_1.kState].localPort,\n      socketAddress: this[symbol_1.kState].localAddr\n    };\n  }\n  get remoteAddr() {\n    return {\n      address: this[symbol_1.kState].remoteAddress,\n      family: this[symbol_1.kState].remoteFamily,\n      port: this[symbol_1.kState].remotePort,\n      socketAddress: this[symbol_1.kState].remoteAddr\n    };\n  }\n  _newRegularPacket() {\n    const packetNumber = this[symbol_1.kNextPacketNumber];\n    this[symbol_1.kNextPacketNumber] = packetNumber.nextNumber();\n    return new packet_1.RegularPacket(this[symbol_1.kID], packetNumber);\n  }\n  _sendFrame(frame, callback) {\n    const regularPacket = this._newRegularPacket();\n    regularPacket.addFrames(frame);\n    regularPacket.isRetransmittable = frame.isRetransmittable();\n    this._sendPacket(regularPacket, callback);\n  }\n  _sendStopWaitingFrame(leastUnacked) {\n    const regularPacket = this._newRegularPacket();\n    const frame = new frame_1.StopWaitingFrame(regularPacket.packetNumber, leastUnacked);\n    regularPacket.addFrames(frame);\n    regularPacket.isRetransmittable = false;\n    debug(`%s session %s - write StopWaitingFrame, packetNumber: %d, leastUnacked: %d`, protocol_1.SessionType[this[symbol_1.kType]], this.id, frame.packetNumber.valueOf(), leastUnacked);\n    this._sendPacket(regularPacket);\n  }\n  _retransmit(frame, rcvTime) {\n    const unackedPackets = this[symbol_1.kUnackedPackets];\n    debug(`%s session %s - start retransmit, count: %d, ackFrame: %j`, protocol_1.SessionType[this[symbol_1.kType]], this.id, unackedPackets.length, frame.valueOf());\n    let count = 0;\n    let packet = unackedPackets.first();\n    while (packet != null) {\n      const packetNumber = packet.packetNumber.valueOf();\n      if (packetNumber > frame.largestAcked) {\n        break; // wait for newest ack\n      } else if (packetNumber === frame.largestAcked) {\n        this[symbol_1.kRTT].updateRTT(packet.sentTime, rcvTime, frame.delayTime);\n      }\n      if (frame.acksPacket(packetNumber)) {\n        unackedPackets.shift();\n        packet = unackedPackets.first();\n        continue;\n      }\n      unackedPackets.shift();\n      packet.setPacketNumber(this[symbol_1.kNextPacketNumber]);\n      this[symbol_1.kNextPacketNumber] = packet.packetNumber.nextNumber();\n      this._sendPacket(packet);\n      count += 1;\n      packet = unackedPackets.first();\n    }\n    debug(`%s session %s - finish retransmit, count: %d`, protocol_1.SessionType[this[symbol_1.kType]], this.id, count);\n    return count;\n  }\n  _sendPacket(packet, callback) {\n    const socket = this[symbol_1.kSocket];\n    if (callback == null) {\n      callback = err => {\n        if (err != null) {\n          this.destroy(err);\n        }\n      };\n    }\n    if (socket == null) {\n      return callback(error_1.QuicError.fromError(error_1.QuicError.QUIC_PACKET_WRITE_ERROR));\n    }\n    if (socket[symbol_1.kState].destroyed) {\n      return callback(error_1.QuicError.fromError(error_1.QuicError.QUIC_PACKET_WRITE_ERROR));\n    }\n    if (packet.isRegular()) {\n      const _packet = packet;\n      if (this.isClient && !this[symbol_1.kState].versionNegotiated) {\n        _packet.setVersion(this[symbol_1.kVersion]);\n      }\n      if (_packet.isRetransmittable) {\n        this[symbol_1.kUnackedPackets].push(packet);\n        if (this[symbol_1.kUnackedPackets].length > 4096) {\n          return callback(error_1.QuicError.fromError(error_1.QuicError.QUIC_TOO_MANY_OUTSTANDING_SENT_PACKETS));\n        }\n      }\n      debug(`%s session %s - write RegularPacket, packetNumber: %d, frames: %j`, protocol_1.SessionType[this[symbol_1.kType]], this.id, _packet.packetNumber.valueOf(), _packet.frames.map(frame => frame.name));\n    }\n    socket_1.sendPacket(socket, packet, this[symbol_1.kState].remotePort, this[symbol_1.kState].remoteAddress, callback);\n    // debug(`%s session %s - write packet: %j`, this.id, packet.valueOf())\n  }\n  _sendWindowUpdate(offset, streamID) {\n    if (streamID == null) {\n      // update for session\n      streamID = new protocol_1.StreamID(0);\n    }\n    debug(`%s session %s - write WindowUpdateFrame, streamID: %d, offset: %d`, protocol_1.SessionType[this[symbol_1.kType]], this.id, streamID.valueOf(), offset);\n    this._sendFrame(new frame_1.WindowUpdateFrame(streamID, offset), err => {\n      if (err != null) {\n        this.emit('error', err);\n      }\n    });\n  }\n  _trySendAckFrame() {\n    const frame = this[symbol_1.kACKHandler].toFrame();\n    if (frame == null) {\n      return;\n    }\n    debug(`%s session %s - write AckFrame, lowestAcked: %d, largestAcked: %d, ackRanges: %j`, protocol_1.SessionType[this[symbol_1.kType]], this.id, frame.lowestAcked, frame.largestAcked, frame.ackRanges);\n    frame.setDelay();\n    this._sendFrame(frame, err => {\n      if (err != null) {\n        this.destroy(err);\n      }\n    });\n  }\n  _handleRegularPacket(packet, rcvTime, bufv) {\n    if (this.isClient && packet.nonce != null) {\n      // TODO\n      // this.cryptoSetup.SetDiversificationNonce(packet.nonce)\n    }\n    try {\n      packet.parseFrames(bufv);\n    } catch (err) {\n      debug(`%s session %s - parsing frames error: %o`, err);\n      this.destroy(error_1.QuicError.fromError(err));\n      return;\n    }\n    const packetNumber = packet.packetNumber.valueOf();\n    this[symbol_1.kState].lastNetworkActivityTime = rcvTime;\n    if (this[symbol_1.kACKHandler].ack(packetNumber, rcvTime, packet.needAck())) {\n      this._trySendAckFrame();\n    }\n    debug(`%s session %s - received RegularPacket, packetNumber: %d, frames: %j`, protocol_1.SessionType[this[symbol_1.kType]], this.id, packetNumber, packet.frames.map(frame => frame.name));\n    for (const frame of packet.frames) {\n      switch (frame.name) {\n        case 'STREAM':\n          this._handleStreamFrame(frame, rcvTime);\n          break;\n        case 'ACK':\n          this._handleACKFrame(frame, rcvTime);\n          break;\n        case 'STOP_WAITING':\n          // The STOP_WAITING frame is sent to inform the peer that it should not continue to\n          // wait for packets with packet numbers lower than a specified value.\n          // The resulting least unacked is the smallest packet number of any packet for which the sender is still awaiting an ack.\n          // If the receiver is missing any packets smaller than this value,\n          // the receiver should consider those packets to be irrecoverably lost.\n          this._handleStopWaitingFrame(frame);\n          break;\n        case 'WINDOW_UPDATE':\n          this._handleWindowUpdateFrame(frame);\n          break;\n        case 'BLOCKED':\n          // The BLOCKED frame is used to indicate to the remote endpoint that this endpoint is\n          // ready to send data (and has data to send), but is currently flow control blocked.\n          // It is a purely informational frame.\n          this._handleBlockedFrame(frame, rcvTime);\n          break;\n        case 'CONGESTION_FEEDBACK':\n          // The CONGESTION_FEEDBACK frame is an experimental frame currently not used.\n          break;\n        case 'PADDING':\n          // When this frame is encountered, the rest of the packet is expected to be padding bytes.\n          return;\n        case 'RST_STREAM':\n          this._handleRstStreamFrame(frame, rcvTime);\n          break;\n        case 'PING':\n          // The PING frame contains no payload.\n          // The receiver of a PING frame simply needs to ACK the packet containing this frame.\n          break;\n        case 'CONNECTION_CLOSE':\n          this.destroy(frame.error);\n          break;\n        case 'GOAWAY':\n          this[symbol_1.kState].shuttingDown = true;\n          this.emit('goaway');\n          break;\n      }\n    }\n  }\n  _handleStreamFrame(frame, rcvTime) {\n    const streamID = frame.streamID.valueOf();\n    let stream = this[symbol_1.kStreams].get(streamID);\n    if (stream == null) {\n      if (this[symbol_1.kState].shuttingDown) {\n        return;\n      }\n      stream = new stream_1.Stream(frame.streamID, this, {});\n      if (this[symbol_1.kState].liveStreamCount >= constant_1.DefaultMaxIncomingStreams) {\n        stream.close(error_1.QuicError.fromError(error_1.QuicError.QUIC_TOO_MANY_AVAILABLE_STREAMS));\n        return;\n      }\n      this[symbol_1.kStreams].set(streamID, stream);\n      this[symbol_1.kState].liveStreamCount += 1;\n      this.emit('stream', stream);\n    } else if (stream.destroyed) {\n      return;\n    }\n    stream._handleFrame(frame, rcvTime);\n  }\n  _handleRstStreamFrame(frame, rcvTime) {\n    const streamID = frame.streamID.valueOf();\n    const stream = this[symbol_1.kStreams].get(streamID);\n    if (stream == null || stream.destroyed) {\n      return;\n    }\n    stream._handleRstFrame(frame, rcvTime);\n  }\n  _handleACKFrame(frame, rcvTime) {\n    // The sender must always close the connection if an unsent packet number is acked,\n    // so this mechanism automatically defeats any potential attackers.\n    if (frame.largestAcked >= this[symbol_1.kNextPacketNumber].valueOf()) {\n      this.destroy(error_1.QuicError.fromError(error_1.QuicError.QUIC_INTERNAL_ERROR));\n      return;\n    }\n    // It is recommended for the sender to send the most recent largest acked packet\n    // it has received in an ack as the stop waiting frame’s least unacked value.\n    if (frame.hasMissingRanges()) {\n      this._sendStopWaitingFrame(frame.largestAcked);\n    }\n    this._retransmit(frame, rcvTime);\n  }\n  _handleStopWaitingFrame(frame) {\n    this[symbol_1.kACKHandler].lowest(frame.leastUnacked.valueOf());\n  }\n  _handleWindowUpdateFrame(frame) {\n    // The stream ID can be 0, indicating this WINDOW_UPDATE applies to the connection level flow control window,\n    // or > 0 indicating that the specified stream should increase its flow control window.\n    const streamID = frame.streamID.valueOf();\n    const offset = frame.offset.valueOf();\n    debug(`%s session %s - received WindowUpdateFrame, streamID: %d, offset: %d`, protocol_1.SessionType[this[symbol_1.kType]], this.id, streamID, offset);\n    if (streamID === 0) {\n      this[symbol_1.kFC].updateMaxSendOffset(offset);\n    } else {\n      const stream = this[symbol_1.kStreams].get(streamID);\n      if (stream != null && !stream.destroyed) {\n        if (stream[symbol_1.kFC].updateMaxSendOffset(offset)) {\n          stream._tryFlushCallbacks();\n        }\n      }\n    }\n  }\n  _handleBlockedFrame(frame, rcvTime) {\n    this[symbol_1.kFC].updateBlockedFrame(frame.streamID.valueOf(), rcvTime);\n  }\n  _intervalCheck(time) {\n    if (this.destroyed) {\n      return;\n    }\n    // The PING frame should be used to keep a connection alive when a stream is open.\n    if (this[symbol_1.kState].keepAlivePingSent && this[symbol_1.kStreams].size > 0 && time - this[symbol_1.kState].lastNetworkActivityTime >= constant_1.PingFrameDelay) {\n      this.ping().catch(err => this.emit('error', err));\n    }\n    for (const stream of this[symbol_1.kStreams].values()) {\n      if (stream.destroyed) {\n        // clearup idle stream\n        if (time - stream[symbol_1.kState].lastActivityTime > this[symbol_1.kState].idleTimeout) {\n          this[symbol_1.kStreams].delete(stream.id);\n        }\n      } else if (time - stream[symbol_1.kState].lastActivityTime > constant_1.MaxStreamWaitingTimeout) {\n        stream.emit('timeout');\n      }\n    }\n    this._trySendAckFrame();\n    return;\n  }\n  request(options) {\n    if (this[symbol_1.kState].shuttingDown) {\n      throw error_1.StreamError.fromError(error_1.StreamError.QUIC_STREAM_PEER_GOING_AWAY);\n    }\n    if (this[symbol_1.kState].liveStreamCount >= constant_1.DefaultMaxIncomingStreams) {\n      throw error_1.QuicError.fromError(error_1.QuicError.QUIC_TOO_MANY_OPEN_STREAMS);\n    }\n    const streamID = this[symbol_1.kNextStreamID];\n    this[symbol_1.kNextStreamID] = streamID.nextID();\n    const stream = new stream_1.Stream(streamID, this, options == null ? {} : options);\n    this[symbol_1.kStreams].set(streamID.valueOf(), stream);\n    this[symbol_1.kState].liveStreamCount += 1;\n    return stream;\n  }\n  goaway(err) {\n    return new Promise(resolve => {\n      if (this[symbol_1.kState].shuttingDown) {\n        return resolve();\n      }\n      this[symbol_1.kState].shuttingDown = true;\n      const frame = new frame_1.GoAwayFrame(this[symbol_1.kNextStreamID].prevID(), error_1.QuicError.fromError(err));\n      debug(`%s session %s - write GoAwayFrame, streamID: %d, error: %j`, protocol_1.SessionType[this[symbol_1.kType]], this.id, frame.streamID.valueOf(), frame.error);\n      this._sendFrame(frame, _e => {\n        resolve();\n      });\n    });\n  }\n  ping() {\n    return new Promise((resolve, reject) => {\n      debug(`%s session %s - write PingFrame`, protocol_1.SessionType[this[symbol_1.kType]], this.id);\n      this._sendFrame(new frame_1.PingFrame(), err => {\n        if (err != null) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n  setTimeout(_msecs) {\n    return;\n  }\n  close(err) {\n    return new Promise(resolve => {\n      if (this[symbol_1.kState].destroyed) {\n        return resolve();\n      }\n      const frame = new frame_1.ConnectionCloseFrame(error_1.QuicError.fromError(err));\n      debug(`%s session %s - write ConnectionCloseFrame, error: %j`, protocol_1.SessionType[this[symbol_1.kType]], this.id, frame.error);\n      this._sendFrame(frame, e => {\n        this.destroy(e);\n        resolve();\n      });\n    });\n  }\n  reset(_err) {\n    return new Promise(resolve => {\n      if (this[symbol_1.kState].destroyed) {\n        return resolve();\n      }\n      const tags = new protocol_1.QuicTags(protocol_1.Tag.PRST);\n      tags.set(protocol_1.Tag.RNON, Buffer.allocUnsafe(8)); // TODO\n      tags.set(protocol_1.Tag.RSEQ, common_1.toBuffer(this[symbol_1.kNextPacketNumber].prevNumber()));\n      const localAddr = this[symbol_1.kState].localAddr;\n      if (localAddr != null) {\n        tags.set(protocol_1.Tag.CADR, common_1.toBuffer(localAddr));\n      }\n      const packet = new packet_1.ResetPacket(this[symbol_1.kID], tags);\n      debug(`%s session %s - write ResetPacket, packet: %j`, protocol_1.SessionType[this[symbol_1.kType]], this.id, packet);\n      this._sendPacket(packet, e => {\n        this.destroy(e);\n        resolve();\n      });\n    });\n  }\n  destroy(err) {\n    if (this[symbol_1.kState].destroyed) {\n      return;\n    }\n    debug(`%s session %s - session destroyed, error: %j`, protocol_1.SessionType[this[symbol_1.kType]], this.id, err);\n    err = error_1.QuicError.checkAny(err);\n    if (err != null && err.isNoError) {\n      err = null;\n    }\n    const socket = this[symbol_1.kSocket];\n    if (socket != null) {\n      socket[symbol_1.kState].conns.delete(this.id);\n      if (this.isClient && !socket[symbol_1.kState].destroyed && (socket[symbol_1.kState].exclusive || socket[symbol_1.kState].conns.size === 0)) {\n        socket.close();\n        socket[symbol_1.kState].destroyed = true;\n      }\n      this[symbol_1.kSocket] = null;\n    }\n    for (const stream of this[symbol_1.kStreams].values()) {\n      stream.destroy(err);\n    }\n    const timer = this[symbol_1.kIntervalCheck];\n    if (timer != null) {\n      clearInterval(timer);\n    }\n    this[symbol_1.kStreams].clear();\n    this[symbol_1.kUnackedPackets].reset();\n    if (err != null) {\n      this.emit('error', err);\n    }\n    if (!this[symbol_1.kState].destroyed) {\n      this[symbol_1.kState].destroyed = true;\n      process.nextTick(() => this.emit('close'));\n    }\n    return;\n  }\n}\nexports.Session = Session;\nclass SessionState {\n  constructor() {\n    this.localFamily = '';\n    this.localAddress = '';\n    this.localPort = 0;\n    this.localAddr = null; // SocketAddress\n    this.remoteFamily = '';\n    this.remoteAddress = '';\n    this.remotePort = 0;\n    this.remoteAddr = null; // SocketAddress\n    this.maxPacketSize = 0;\n    this.bytesRead = 0;\n    this.bytesWritten = 0;\n    this.idleTimeout = constant_1.DefaultIdleTimeout;\n    this.liveStreamCount = 0;\n    this.lastNetworkActivityTime = Date.now();\n    this.destroyed = false;\n    this.shutdown = false;\n    this.shuttingDown = false; // send or receive GOAWAY\n    this.versionNegotiated = false;\n    this.keepAlivePingSent = false;\n  }\n}\nexports.SessionState = SessionState;\nclass ACKHandler {\n  constructor() {\n    this.misshit = 0;\n    this.lowestAcked = 0;\n    this.largestAcked = 0;\n    this.numbersAcked = [];\n    this.largestAckedTime = 0;\n    this.lastAckedTime = Date.now();\n  }\n  lowest(packetNumber) {\n    if (packetNumber > this.lowestAcked) {\n      this.lowestAcked = packetNumber;\n    }\n  }\n  ack(packetNumber, rcvTime, needAck) {\n    if (packetNumber < this.lowestAcked) {\n      return false; // ignore\n    }\n    if (packetNumber > this.largestAcked) {\n      if (packetNumber - this.largestAcked > 1) {\n        this.misshit += 1;\n      }\n      this.largestAcked = packetNumber;\n      this.largestAckedTime = rcvTime;\n    } else if (Math.abs(packetNumber - this.numbersAcked[0]) > 1) {\n      this.misshit += 1;\n    }\n    let shouldAck = this.numbersAcked.unshift(packetNumber) >= 511; // 256 blocks + 255 gaps, too many packets, should ack\n    if (!needAck && this.largestAcked - this.lowestAcked <= 1) {\n      // ACK frame\n      this.lowestAcked = this.largestAcked;\n      this.numbersAcked.length = 1;\n      return false;\n    }\n    if (this.misshit > 16) {\n      shouldAck = true;\n    }\n    const timeSpan = rcvTime - this.lastAckedTime;\n    if (timeSpan >= 512) {\n      shouldAck = true;\n    }\n    if (shouldAck) {\n      debug(`should ACK, largestAcked: %d, lowestAcked: %d, misshit: %d, numbersAcked: %d, timeSpan: %d`, this.largestAcked, this.lowestAcked, this.misshit, this.numbersAcked.length, timeSpan);\n      this.lastAckedTime = rcvTime;\n    }\n    return shouldAck;\n  }\n  toFrame() {\n    const numbersAcked = this.numbersAcked;\n    if (numbersAcked.length === 0) {\n      return null;\n    }\n    numbersAcked.sort((a, b) => b - a);\n    if (numbersAcked[0] <= this.lowestAcked) {\n      numbersAcked.length = 0;\n      this.largestAcked = this.lowestAcked;\n      return null;\n    }\n    const frame = new frame_1.AckFrame();\n    frame.largestAcked = this.largestAcked;\n    frame.largestAckedTime = this.largestAckedTime;\n    let range = new frame_1.AckRange(this.largestAcked, this.largestAcked);\n    // numbersAcked should include largestAcked and lowestAcked for this AGL\n    for (let i = 1, l = numbersAcked.length; i < l; i++) {\n      const num = numbersAcked[i];\n      if (num < this.lowestAcked) {\n        numbersAcked.length = i; // drop smaller numbers\n        break;\n      }\n      const ret = numbersAcked[i - 1] - num;\n      if (ret === 1) {\n        range.first = num;\n      } else if (ret > 1) {\n        frame.ackRanges.push(range);\n        range = new frame_1.AckRange(num, num);\n      } // else ingnore\n    }\n    frame.lowestAcked = range.first;\n    if (range.last < frame.largestAcked) {\n      frame.ackRanges.push(range);\n    }\n    if (frame.ackRanges.length === 0) {\n      this.lowestAcked = this.largestAcked;\n      numbersAcked.length = 1;\n    } else if (frame.ackRanges.length > 256) {\n      // if ackRanges.length > 256, ignore some ranges between\n      frame.ackRanges[255] = frame.ackRanges[frame.ackRanges.length - 1];\n      frame.ackRanges.length = 256;\n    }\n    debug(`after build AckFrame, largestAcked: %d, lowestAcked: %d, numbersAcked: %j`, this.largestAcked, this.lowestAcked, numbersAcked);\n    this.misshit = 0;\n    return frame;\n  }\n}\nexports.ACKHandler = ACKHandler;","map":{"version":3,"names":["util_1","require","events_1","constant_1","protocol_1","symbol_1","frame_1","packet_1","error_1","flowcontrol_1","congestion_1","socket_1","stream_1","common_1","debug","debuglog","Session","EventEmitter","constructor","id","type","kID","kType","kStreams","Map","kNextStreamID","StreamID","SessionType","SERVER","kState","SessionState","kACKHandler","ACKHandler","kSocket","kVersion","kIntervalCheck","kNextPacketNumber","PacketNumber","kUnackedPackets","Queue","kRTT","RTTStats","kFC","isClient","ConnectionFlowController","ReceiveConnectionWindow","DefaultMaxReceiveConnectionWindowClient","DefaultMaxReceiveConnectionWindowServer","valueOf","version","CLIENT","destroyed","localAddr","address","localAddress","family","localFamily","port","localPort","socketAddress","remoteAddr","remoteAddress","remoteFamily","remotePort","_newRegularPacket","packetNumber","nextNumber","RegularPacket","_sendFrame","frame","callback","regularPacket","addFrames","isRetransmittable","_sendPacket","_sendStopWaitingFrame","leastUnacked","StopWaitingFrame","_retransmit","rcvTime","unackedPackets","length","count","packet","first","largestAcked","updateRTT","sentTime","delayTime","acksPacket","shift","setPacketNumber","socket","err","destroy","QuicError","fromError","QUIC_PACKET_WRITE_ERROR","isRegular","_packet","versionNegotiated","setVersion","push","QUIC_TOO_MANY_OUTSTANDING_SENT_PACKETS","frames","map","name","sendPacket","_sendWindowUpdate","offset","streamID","WindowUpdateFrame","emit","_trySendAckFrame","toFrame","lowestAcked","ackRanges","setDelay","_handleRegularPacket","bufv","nonce","parseFrames","lastNetworkActivityTime","ack","needAck","_handleStreamFrame","_handleACKFrame","_handleStopWaitingFrame","_handleWindowUpdateFrame","_handleBlockedFrame","_handleRstStreamFrame","error","shuttingDown","stream","get","Stream","liveStreamCount","DefaultMaxIncomingStreams","close","QUIC_TOO_MANY_AVAILABLE_STREAMS","set","_handleFrame","_handleRstFrame","QUIC_INTERNAL_ERROR","hasMissingRanges","lowest","updateMaxSendOffset","_tryFlushCallbacks","updateBlockedFrame","_intervalCheck","time","keepAlivePingSent","size","PingFrameDelay","ping","catch","values","lastActivityTime","idleTimeout","delete","MaxStreamWaitingTimeout","request","options","StreamError","QUIC_STREAM_PEER_GOING_AWAY","QUIC_TOO_MANY_OPEN_STREAMS","nextID","goaway","Promise","resolve","GoAwayFrame","prevID","_e","reject","PingFrame","setTimeout","_msecs","ConnectionCloseFrame","e","reset","_err","tags","QuicTags","Tag","PRST","RNON","Buffer","allocUnsafe","RSEQ","toBuffer","prevNumber","CADR","ResetPacket","checkAny","isNoError","conns","exclusive","timer","clearInterval","clear","process","nextTick","exports","maxPacketSize","bytesRead","bytesWritten","DefaultIdleTimeout","Date","now","shutdown","misshit","numbersAcked","largestAckedTime","lastAckedTime","Math","abs","shouldAck","unshift","timeSpan","sort","a","b","AckFrame","range","AckRange","i","l","num","ret","last"],"sources":["../src/session.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}