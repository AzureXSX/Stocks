{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// **Github:** https://github.com/fidm/quic\n//\n// **License:** MIT\n// https://github.com/lucas-clemente/quic-go/blob/master/internal/protocol/server_parameters.go\n// MinRemoteIdleTimeout is the minimum value that we accept for the remote idle timeout\nexports.MinRemoteIdleTimeout = 1000 * 5;\n// DefaultIdleTimeout is the default idle timeout\nexports.DefaultIdleTimeout = 1000 * 30;\n// DefaultHandshakeTimeout is the default timeout for a connection until the crypto handshake succeeds.\nexports.DefaultHandshakeTimeout = 1000 * 10;\n// ClosedSessionDeleteTimeout the server ignores packets arriving on a connection that is already closed\n// after this time all information about the old connection will be deleted\nexports.ClosedSessionDeleteTimeout = 1000 * 60;\n// MaxIdleTimeout is the max idle timeout\nexports.MaxIdleTimeout = 10 * 60 * 1000;\n// MaxIdleTimeoutServer is the maximum idle timeout that can be negotiated, for the server\nexports.MaxIdleTimeoutServer = 1 * 60 * 1000;\nexports.MaxStreamWaitingTimeout = 30 * 1000;\n// The PING frame should be used to keep a connection alive when a stream is open.\n// The default is to do this after 15 seconds of quiescence, which is much shorter than most NATs time out.\nexports.PingFrameDelay = 15 * 1000;\n// MaxOffset is the maximum value of a ByteCount\nexports.MaxOffset = Number.MAX_SAFE_INTEGER; // 1<<62 - 1?\n// MaxReceivePacketSize maximum packet size of any QUIC packet, based on\n// ethernet's max size, minus the IP and UDP headers. IPv6 has a 40 byte header,\n// UDP adds an additional 8 bytes.  This is a total overhead of 48 bytes.\n// Ethernet's max packet size is 1500 bytes,  1500 - 48 = 1452.\n//\n// MaxPacketSizeIPv4 is the maximum packet size that we use for sending IPv4 packets.\nexports.MaxPacketSizeIPv4 = 1252;\n// MaxPacketSizeIPv6 is the maximum packet size that we use for sending IPv6 packets.\nexports.MaxPacketSizeIPv6 = 1232;\nexports.MaxReceivePacketSize = 1452;\nexports.MaxStreamReadCacheSize = 1024 * 1024 * 2; // todo\n// ----------\n// DefaultTCPMSS is the default maximum packet size used in the Linux TCP implementation.\n// Used in QUIC for congestion window computations in bytes.\nexports.DefaultTCPMSS = 1460;\n// MinClientHelloSize is the minimum size the server expects an inchoate CHLO to have (in gQUIC)\nexports.MinClientHelloSize = 1024;\n// MinInitialPacketSize is the minimum size an Initial packet (in IETF QUIC) is required to have.\nexports.MinInitialPacketSize = 1200;\n// MaxClientHellos is the maximum number of times we'll send a client hello\n// The value 3 accounts for:\n// * one failure due to an incorrect or missing source-address token\n// * one failure due the server's certificate chain being unavailable\n// and the server being unwilling to send it without a valid source-address token\nexports.MaxClientHellos = 3;\n// NonForwardSecurePacketSizeReduction is the number of bytes a non forward-secure packet has to be smaller than a forward-secure packet\n// This makes sure that those packets can always be retransmitted without splitting the contained StreamFrames\nexports.NonForwardSecurePacketSizeReduction = 50;\n// DefaultMaxCongestionWindow is the default for the max congestion window\nexports.DefaultMaxCongestionWindow = 1000;\n// InitialCongestionWindow is the initial congestion window in QUIC packets\nexports.InitialCongestionWindow = 32;\n// MaxUndecryptablePackets limits the number of undecryptable packets that a\n// session queues for later until it sends a public reset.\nexports.MaxUndecryptablePackets = 10;\n// PublicResetTimeout is the time to wait before sending a Public Reset when receiving too many undecryptable packets during the handshake\n// This timeout allows the Go scheduler to switch to the Go rountine that reads the crypto stream and to escalate the crypto\nexports.PublicResetTimeout = 500; // ms\n// ReceiveStreamWindow is the stream-level flow control window for receiving data\n// This is the value that Google servers are using\nexports.ReceiveStreamWindow = (1 << 10) * 32; // 32 kB\n// ReceiveConnectionWindow is the connection-level flow control window for receiving data\n// This is the value that Google servers are using\nexports.ReceiveConnectionWindow = (1 << 10) * 48; // 48 kB\n// DefaultMaxReceiveStreamWindowServer is the default maximum stream-level flow control window for receiving data, for the server\n// This is the value that Google servers are using\nexports.DefaultMaxReceiveStreamWindowServer = 1 * (1 << 20); // 1 MB\n// DefaultMaxReceiveConnectionWindowServer is the default connection-level flow control window for receiving data, for the server\n// This is the value that Google servers are using\nexports.DefaultMaxReceiveConnectionWindowServer = 1.5 * (1 << 20); // 1.5 MB\n// DefaultMaxReceiveStreamWindowClient is the default maximum stream-level flow control window for receiving data, for the client\n// This is the value that Chromium is using\nexports.DefaultMaxReceiveStreamWindowClient = 6 * (1 << 20); // 6 MB\n// DefaultMaxReceiveConnectionWindowClient is the default connection-level flow control window for receiving data, for the client\n// This is the value that Google servers are using\nexports.DefaultMaxReceiveConnectionWindowClient = 15 * (1 << 20); // 15 MB\n// ConnectionFlowControlMultiplier determines how much larger the connection flow control windows\n// needs to be relative to any stream's flow control window\n// This is the value that Chromium is using\nexports.ConnectionFlowControlMultiplier = 1.5;\n// WindowUpdateThreshold is the fraction of the receive window that has to be consumed before an higher offset is advertised to the client\nexports.WindowUpdateThreshold = 0.25;\n// DefaultMaxIncomingStreams is the maximum number of streams that a peer may open\nexports.DefaultMaxIncomingStreams = 100;\n// DefaultMaxIncomingUniStreams is the maximum number of unidirectional streams that a peer may open\nexports.DefaultMaxIncomingUniStreams = 100;\n// MaxStreamsMultiplier is the slack the client is allowed for the maximum number of streams per connection,\n// needed e.g. when packets are out of order or dropped. The minimum of this procentual increase and\n// the absolute increment specified by MaxStreamsMinimumIncrement is used.\nexports.MaxStreamsMultiplier = 1.1;\n// MaxStreamsMinimumIncrement is the slack the client is allowed for the maximum number of\n// streams per connection, needed e.g. when packets are out of order or dropped. The minimum of this\n// absolute increment and the procentual increase specified by MaxStreamsMultiplier is used.\nexports.MaxStreamsMinimumIncrement = 10;\n// MaxSessionUnprocessedPackets is the max number of packets stored in each session that are not yet processed.\nexports.MaxSessionUnprocessedPackets = exports.DefaultMaxCongestionWindow;\n// SkipPacketAveragePeriodLength is the average period length in which one packet number is skipped to prevent an Optimistic ACK attack\n// export const SkipPacketAveragePeriodLength = 500\n// MaxTrackedSkippedPackets is the maximum number of skipped packet numbers\n// the SentPacketHandler keep track of for Optimistic ACK attack mitigation\nexports.MaxTrackedSkippedPackets = 10;\n// MaxOutstandingSentPackets is maximum number of packets saved for retransmission.\n// When reached, it imposes a soft limit on sending new packets:\n// Sending ACKs and retransmission is still allowed, but now new regular packets can be sent.\nexports.MaxOutstandingSentPackets = 2 * exports.DefaultMaxCongestionWindow;\n// MaxTrackedSentPackets is maximum number of sent packets saved for retransmission.\n// When reached, no more packets will be sent.\n// This value *must* be larger than MaxOutstandingSentPackets.\nexports.MaxTrackedSentPackets = exports.MaxOutstandingSentPackets * 5 / 4;\n// MaxTrackedReceivedAckRanges is the maximum number of ACK ranges tracked\nexports.MaxTrackedReceivedAckRanges = exports.DefaultMaxCongestionWindow;\n// MaxNonRetransmittableAcks is the maximum number of packets containing an ACK, but no retransmittable frames, that we send in a row\nexports.MaxNonRetransmittableAcks = 19;\n// MaxStreamFrameSorterGaps is the maximum number of gaps between received StreamFrames\n// prevents DoS attacks against the streamFrameSorter\nexports.MaxStreamFrameSorterGaps = 1000;\n// CryptoMaxParams is the upper limit for the number of parameters in a crypto message.\n// Value taken from Chrome.\nexports.CryptoMaxParams = 128;\n// CryptoParameterMaxLength is the upper limit for the length of a parameter in a crypto message.\nexports.CryptoParameterMaxLength = 4000;\n// EphermalKeyLifetime is the lifetime of the ephermal key during the handshake, see handshake.getEphermalKEX.\nexports.EphermalKeyLifetime = 1000 * 60;\n// NumCachedCertificates is the number of cached compressed certificate chains, each taking ~1K space\nexports.NumCachedCertificates = 128;\n// MinStreamFrameSize is the minimum size that has to be left in a packet, so that we add another STREAM frame.\n// This avoids splitting up STREAM frames into small pieces, which has 2 advantages:\n// 1. it reduces the framing overhead\n// 2. it reduces the head-of-line blocking, when a packet is lost\nexports.MinStreamFrameSize = 128;","map":{"version":3,"names":["exports","MinRemoteIdleTimeout","DefaultIdleTimeout","DefaultHandshakeTimeout","ClosedSessionDeleteTimeout","MaxIdleTimeout","MaxIdleTimeoutServer","MaxStreamWaitingTimeout","PingFrameDelay","MaxOffset","Number","MAX_SAFE_INTEGER","MaxPacketSizeIPv4","MaxPacketSizeIPv6","MaxReceivePacketSize","MaxStreamReadCacheSize","DefaultTCPMSS","MinClientHelloSize","MinInitialPacketSize","MaxClientHellos","NonForwardSecurePacketSizeReduction","DefaultMaxCongestionWindow","InitialCongestionWindow","MaxUndecryptablePackets","PublicResetTimeout","ReceiveStreamWindow","ReceiveConnectionWindow","DefaultMaxReceiveStreamWindowServer","DefaultMaxReceiveConnectionWindowServer","DefaultMaxReceiveStreamWindowClient","DefaultMaxReceiveConnectionWindowClient","ConnectionFlowControlMultiplier","WindowUpdateThreshold","DefaultMaxIncomingStreams","DefaultMaxIncomingUniStreams","MaxStreamsMultiplier","MaxStreamsMinimumIncrement","MaxSessionUnprocessedPackets","MaxTrackedSkippedPackets","MaxOutstandingSentPackets","MaxTrackedSentPackets","MaxTrackedReceivedAckRanges","MaxNonRetransmittableAcks","MaxStreamFrameSorterGaps","CryptoMaxParams","CryptoParameterMaxLength","EphermalKeyLifetime","NumCachedCertificates","MinStreamFrameSize"],"sources":["../../src/internal/constant.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}